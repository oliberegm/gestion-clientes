# ----------------------------------------------------------------------
# 1. SPRING BOOT CORE CONFIGURATION
# ----------------------------------------------------------------------
spring:
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:default}

  # Configuración de Base de Datos (PostgreSQL)
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver

  # Configuración de JPA/Hibernate
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  # Configuración de RabbitMQ (AMQP)
  rabbitmq:
    host: ${RABBIT_HOST}
    port: ${RABBIT_PORT}
    username: ${RABBIT_USERNAME}
    password: ${RABBIT_PASSWORD}

# ----------------------------------------------------------------------
# 2. CONFIGURACIÓN DE SEGURIDAD Y MONITOREO (ACTUATOR/MICROMETER)
# ----------------------------------------------------------------------
management:
  # Exposición de Endpoints de Actuator
  endpoints:
    web:
      exposure:
        include: health, metrics, prometheus, info
        #include=: # Configuración de Endpoints específicos
      shutdown:
        enabled: true # Habilita el endpoint /actuator/shutdown
  endpoint:
    health:
      show-details: always # Muestra detalles completos del estado de salud
    prometheus:
      enabled: true # Habilita el endpoint /actuator/prometheus

# Configuración de Métricas (Micrometer)
metrics:
  export:
    prometheus:
      enabled: true # Habilita la exportación de métricas a Prometheus

# ----------------------------------------------------------------------
# 3. CONFIGURACIÓN DE DOCUMENTACIÓN (OPENAPI/SWAGGER)
# ----------------------------------------------------------------------

springdoc:
  swagger-ui:
    enabled: true
    path: /swagger-ui.html # URL para acceder a la interfaz web
  api-docs:
    path: /v3/api-docs # URL para el archivo de especificación JSON

  # Metadata de la API
  info:
    title: Microservicio de Gestión de Clientes (PinApp)
    version: 1.0.0
    description: API REST para el manejo de clientes, incluyendo registro, métricas y listado. Diseñado con Clean Architecture y Spring Boot 3.
    contact:
      name: Desarrollador Oliber Garcia
      email: oliber.garcia@gmail.com

# ----------------------------------------------------------------------
# 4. PROPIEDADES ESPECÍFICAS DE LA APLICACIÓN (Mensajería)
# ----------------------------------------------------------------------
rabbitmq:
  exchange:
    name: client-events-exchange
  routing:
    key: client.created

# ----------------------------------------------------------------------
# 5. PROPIEDADES JWT
# ----------------------------------------------------------------------
security:
  jwt:
    secret-key: NDgwZDE3YjM3YjBhYjYwMGE5YmYyOGUwM2VjYjA5ZmM0YjYwYjYwMGE5YmYyOGUwM2VjYjA5ZmM0YjY=
    expiration-time: 86400000